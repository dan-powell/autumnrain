.Home {
    overflow-x: hidden;
    padding-top: 0;
}

.Header {
    position: relative;
    display: flex;
    // flex-wrap: wrap;
    background: $theme-tertiary;
    &-intro {
        flex: 1 1 auto;
        display: flex;
        padding: 2em;
        align-items: center;
        justify-content: center;
    }
    &-graphic {
        flex: 3 1 100%;
    }
    &-text {
        padding: 2em;
        text-align: center;
        color: $theme-positive;
    }
    &-title {
        font-size: 2.4rem;
        margin-bottom: 1em
    }
    &-subtitle {
        font-size: 2rem;
        margin-bottom: 1em
    }
    &-links {
        // display: flex;
        // flex-wrap: wrap;
        // justify-content: center;
        text-align: center;
    }
    &-link {
        display: inline-block;
        padding: .5em 1em;
        margin: .5em;
        border: $theme-primary 3px solid;
        text-transform: uppercase;
        font-size: 1.2em;
        &:hover {
            background: $theme-primary;
            color: $theme-tertiary;
        }
    }
    &-img {
        width: 100%;
        image-rendering: pixelated;
        object-fit: cover;
        object-position: 0 50%; /* positioned top left of the content box */
    }
    @media screen and (max-width: $screen-md) {
        display: block;
        // flex-wrap: wrap;
        position: relative;
        &-intro {
            flex: 1 1 auto;
            position: relative;
            background: rgba(0,0,0,0.5);
            z-index: 1;
        }
        &-img {
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 100%;
            flex: 1 1 100%;
        }
        &-title {
            font-size: 2rem;
        }
        &-subtitle {
            font-size: 1.4rem;
        }
    }
}
.Games {
    &-list {
        // display: flex;
        flex-wrap: wrap;
        & > * {
            flex: 1 1 50%;
        }
    }
}
.Game {
    position: relative;
    // overflow-x: hidden;
    &-link {
        display: block;
        position: absolute;
        width: 100%;
        height: 100%;
        left: 0;
        bottom: 0;
        z-index: 10;
        &:hover {
            cursor: crosshair;
        }
        &:hover + .Game-inner {
            // transform: scale(1.3);
            // background: rgba(0,0,0,0.2);
            cursor: crosshair;
        }
    }
    &-bg {
        display: block;
        position: absolute;
        width: 100%;
        height: 100%;
        left: 0;
        bottom: 0;
        z-index: -1;
        background: $theme-primary;
        box-shadow: inset rgba(0,0,0,0.2) 0 0 3em 3em;
    }
    &-inner {
        display: flex;
        justify-content: space-around;
        // align-items: center;
        // flex-wrap: wrap;

    }
    &-cart {
        flex: 1 1 33%;
        padding: 2em;
        text-align: center;
        display: flex;
        justify-content: center;
        // align-items: center;

        &-shadow {
            &::after {
                content: '';
                display: block;
                width: 100%;
                height: 30px;
                background: radial-gradient(rgba(0,0,0,1), rgba(0,0,0,0) 75%);
                animation-name: floatshadow;
                animation-timing-function: ease-in-out;
                animation-iteration-count: infinite;
                animation-duration: 4s;
            }
        }
        &-float {
            animation-name: float;
            animation-timing-function: ease-in-out;
            animation-iteration-count: infinite;
            animation-duration: 4s;
            perspective: 1200px;
        }
        &-img {
            animation-name: spin;
            animation-timing-function: ease-in-out;
            animation-direction: alternate;
            animation-iteration-count: infinite;
            animation-duration: 6s;
            transform-style: preserve-3d;
            image-rendering: pixelated;
            width: 300px;
        }
    }
    &-name {
        text-transform: uppercase;
    }
    &-subtitle {
        font-size: 1.4em;
        margin-bottom: .5em;
    }
    &-description {
        text-align: center;
        flex: 1 1 66%;
        padding: 3em 3em 3em 3em;
    }
    &-wrap {
        display: flex;
        flex-wrap: wrap;
        padding: 1em;
        justify-content: space-around;
        align-items: center;
    }
    &-previews {
        display: flex;
        justify-content: space-around;
        flex: 1 1 auto;
    }
    &-video {
        width: 180px;
        max-width: 100%;
        height: auto;
        margin: 1em;
        border: 3px $theme-positive solid;
    }
    &-buttons {
        flex: 1 1 auto;
    }
    &-button {
        position: relative;
        display: block;
        padding: .5em 1em;
        margin: .5em;
        border: $theme-tertiary 3px solid;
        color: $theme-tertiary;
        text-transform: uppercase;
        font-size: 1.2em;
        z-index: 20;
        &:hover {
            background: $theme-tertiary;
            color: $theme-primary;
        }
    }
    &:nth-child(2n) {

    }
    &:nth-child(2n) & {
        &-bg {
            background: #6db691;
        }
        &-cart {
            &-shadow {
                &::after {
                    animation-delay: 1s;
                }
            }
            &-float {
                animation-delay: 1s;
            }
        }
        &-cart { order: 2 }
        &-description { order: 1 }
    }
    @media screen and (max-width: $screen-md) {
        &-cart {
            z-index: 20;
        }
    }
    @media screen and (max-width: $screen-sm) {
        &-inner {
            flex-wrap: wrap;
        }
        &:nth-child(2n) & {
            &-cart { order: 1 }
            &-description { order: 2 }
        }
        &-previews {
            flex-wrap: wrap;
        }
    }
}
@keyframes float {
    0% {
        transform: translateY(0);
    }

    50% {
        transform: translateY(-3em);
    }

    100% {
        transform: translateY(0);
    }
}
@keyframes floatshadow {
    0% {
        transform: scale(1);
        opacity: 0.6;
    }

    50% {
        transform: scale(1.6);
        opacity: 0.2;
    }

    100% {
        transform: scale(1);
        opacity: 0.6;
    }
}
@keyframes spin {
    from {
        transform: rotateY(40deg);
    }

    to {
        transform: rotateY(-40deg);
    }
}
// Here's the meat and potatoes.
/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.u-glitch {
    position: relative;
    /* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
    // animation: glitch-skew 1s infinite linear alternate-reverse;
    // Creates a copy before our text.
    &::before {
        // Duplicates our text with the mixin.
        @include glitchCopy;
        // Scoots text slightly to the left for the color offset.
        left: 1px;
        // Creates the color 'shadow' that happens on the glitch.
        text-shadow: -1px 0 #ff00c1;
        /* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
        clip: rect(44px, 450px, 56px, 0);
        /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
        animation: glitch-anim 5s infinite linear alternate-reverse;
    }
    // Creates a copy after our text. Note comments from ::before.
    &::after {
        @include glitchCopy;
        left: -1px;
        text-shadow: -1px 0 #00fff9, 1px 1px #ff00c1;
        animation: glitch-anim2 1s infinite linear alternate-reverse;
    }
}
/* Creates an animation with 20 steaps. For each step, it calculates
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
    $steps: 20;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}
// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
    $steps: 20;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}
// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
    $steps: 10;
    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            transform: skew((random(10) - 5) + deg);
        }
    }
}





/* REGULAR SCANLINES SETTINGS */

    // width of 1 scanline (min.: 1px)
    $scan-width: 2px;

    // emulates a damage-your-eyes bad pre-2000 CRT screen ♥ (true, false)
    $scan-crt: true;

    // frames-per-second (should be > 1), only applies if $scan-crt: true;
    $scan-fps: 60;

    // scanline-color (rgba)
    $scan-color: rgba(#000, .1);

    // set z-index on 8, like in ♥ 8-bits ♥, or…
    // set z-index on 2147483648 or more to enable scanlines on Chrome fullscreen (doesn't work in Firefox or IE);
    $scan-z-index: 2147483648;

/* MOVING SCANLINE SETTINGS */

    // moving scanline (true, false)
    $scan-moving-line: true;

    // opacity of the moving scanline
    $scan-opacity: .75;

/* MIXINS */

    // apply CRT animation: @include scan-crt($scan-crt);
    @mixin scan-crt($scan-crt) {
        @if $scan-crt == true {
            animation: scanlines 1s steps($scan-fps) infinite;
        }
        @else { animation: none; }
    }

    // apply CRT animation: @include scan-crt($scan-crt);
    @mixin scan-moving($scan-moving-line) {
        @if $scan-moving-line == true {
            animation: scanline 6s linear infinite;
        }
        @else { animation: none; }
    }

/* CSS .scanlines CLASS */

    .u-scanlines {
        // position: relative;
        overflow: hidden; // only to animate the unique scanline

        &:before,
        &:after {
            display: block;
            pointer-events: none;
            content: '';
            position: absolute;
        }

        // unique scanline travelling on the screen
        &:before {
            // position: absolute;
            // bottom: 100%;
            width: 100%;
            height: $scan-width * 1;
            z-index: $scan-z-index + 1;
            background: $scan-color;
            opacity: $scan-opacity;
            // animation: scanline 6s linear infinite;
            @include scan-moving($scan-moving-line);
        }

        // the scanlines, so!
        &:after {
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: $scan-z-index;
            background: linear-gradient(
                to bottom,
                transparent 50%,
                $scan-color 51%
            );
            background-size: 100% $scan-width*2;
            @include scan-crt($scan-crt);
        }
    }

/* ANIMATE UNIQUE SCANLINE */
    @keyframes scanline {
        0% {
            transform: translate3d(0,200000%,0);
            // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
        }
    }

    @keyframes scanlines {
        0% {
            background-position: 0 50%;
            // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
        }
    }
